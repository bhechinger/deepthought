- hosts: localhost
  vars:
    multimc_url: https://files.multimc.org/downloads/
    multimc_file: multimc_1.4-1.deb
    limits:
      - domain: "*"
        limit_type: soft
        limit_item: nproc
        value: 65535
      - domain: "*"
        limit_type: hard
        limit_item: nproc
        value: 65535
      - domain: "*"
        limit_type: soft
        limit_item: nofile
        value: 524288
      - domain: "*"
        limit_type: hard
        limit_item: nofile
        value: 524288
      - domain: root
        limit_type: soft
        limit_item: nproc
        value: 65535
      - domain: root
        limit_type: hard
        limit_item: nproc
        value: 65535
      - domain: root
        limit_type: soft
        limit_item: nofile
        value: 65535
      - domain: root
        limit_type: hard
        limit_item: nofile
        value: 65535

  roles:
    - role: patrick-hill.franz
      vars:
        franz_version: 5.6.1
    - role: ansible-role-keybase
      become: yes
#    - role: m4rcu5nl.zerotier-one
#      become: yes
    - role: oefenweb.dropbox
      become: yes
    - role: cloudalchemy.node_exporter
      become: yes
      vars:
        node_exporter_enabled_collectors:
          - systemd
          - processes
    - role: cloudalchemy.prometheus
      become: yes
      vars:
        prometheus_targets:
          node:
            - targets:
                - localhost:9100
                - localhost:9401
                - localhost:9402
              labels:
                env: deepthought
    - name: cloudalchemy.grafana
      become: yes
      vars:
        grafana_security:
          admin_user: wonko
          admin_password: "{{ grafana_password }}"
        grafana_datasources:
          - name: prometheus
            type: prometheus
            access: proxy
            url: 'http://localhost:9090'
            basicAuth: false
        grafana_dashboards:
          - dashboard_id: 1860
            revision_id: 1
            datasource: prometheus
          - dashboard_id: 6387
            revision_id: 1
            datasource: prometheus

  tasks:
### Set inotify watches for JetBrains

    - name: Set inotify watches
      become: yes
      copy:
        dest: "/etc/sysctl.d/90-inotify.conf"
        content: |
          fs.inotify.max_user_watches = 524288
      register: inotify

### Set open files stuff for app requirements

    - name: Set file max
      become: yes
      copy:
        dest: "/etc/sysctl.d/90-file-max.conf"
        content: |
          fs.file-max = 524288
      register: filemax

    - name: run sysctl
      become: yes
      command: sysctl -p
      when: inotify.changed or filemax.changed

    - name: Add or modify nproc soft limit for the user root. Keep or set the maximal value.
      become: yes
      community.general.pam_limits:
        domain: "{{ item.domain }}"
        limit_type: "{{ item.limit_type }}"
        limit_item: "{{ item.limit_item }}"
        value: "{{ item.value }}"
        use_max: yes
      loop: "{{ limits }}"

    - name: Set DefaultLimitNOFILE in systemd system.conf
      become: yes
      lineinfile:
        path: /etc/systemd/system.conf
        regexp: '^DefaultLimitNOFILE='
        line: DefaultLimitNOFILE=524288

    - name: Set DefaultLimitNOFILE in systemd user.conf
      become: yes
      lineinfile:
        path: /etc/systemd/user.conf
        regexp: '^DefaultLimitNOFILE='
        line: DefaultLimitNOFILE=524288

### Set firewire to highest priority RT process

    - name: Set RTIRQ_NAME_LIST to set firewire highest priority
      become: yes
      lineinfile:
        path: /etc/systemd/user.conf
        regexp: '^RTIRQ_NAME_LIST='
        line: RTIRQ_NAME_LIST="firewire_ohci firewire snd usb i8042"

### Add APT keys and repos

    - name: Add apt signing keys
      become: yes
      apt_key:
        url: "{{ item }}"
        state: present
      with_items:
        - https://bazel.build/bazel-release.pub.gpg
        - https://download.docker.com/linux/ubuntu/gpg
        - https://baltocdn.com/helm/signing.asc
        - https://packages.cloud.google.com/apt/doc/apt-key.gpg
        - https://packages.riot.im/debian/riot-im-archive-keyring.gpg
        - https://packagecloud.io/golang-migrate/migrate/gpgkey
        - https://dl.winehq.org/wine-builds/winehq.key

    - name: Add apt repositories into sources list
      become: yes
      apt_repository:
        repo: "{{ item }}"
        state: present
      with_items:
        - deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8
        - deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        - deb https://baltocdn.com/helm/stable/debian/ all main
        - deb https://apt.kubernetes.io/ kubernetes-xenial main
        - ppa:lutris-team/lutris
        - ppa:git-core/ppa ## This is broken for hirsute
        - deb http://ppa.launchpad.net/yubico/stable/ubuntu focal main
#        - ppa:yubico/stable
        - deb [arch=amd64] https://packages.riot.im/debian/ default main
        - "deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ {{ ansible_distribution_release }} main"
        - deb https://dl.winehq.org/wine-builds/ubuntu/ focal main

    - name: Add NodeSource stuff
#      warn: false # why doesn't this work?
      become: yes
      shell: curl -sL https://deb.nodesource.com/setup_14.x | bash -

    - name: Install CircleCI CLI
      become: yes
      shell: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | bash
### Pin apps

    - name: Pin bazel to 3.7.2 as 4.0 breaks our pre-commit tests
      become: yes
      copy:
        dest: "/etc/apt/preferences.d/bazel"
        content: |
          Package: bazel
          Pin: version 3.7.2
          Pin-Priority: 999

### Install software

    - name: Install a list of packages
      become: yes
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - gnupg-agent
          - software-properties-common
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - quassel-client
          - git
          - git-lfs
          - git-extras
          - ark
          - bazel
          - bison
          - cli-common
          - cloc
          - curl
          - default-jre
          - flex
          - geoip-database
          - hunspell
          - jq
          - lutris
          - nfs-common
          - postgresql-client-12
          - postgresql-client-common
          - rpcbind
          - s-tui
          - sane
          - screen
          - stress
          - traceroute
          - virt-manager
          - virt-viewer
          - xournal
          - xdg-desktop-portal
          - xdg-desktop-portal-gtk
          - kubectl
          - helm
          - redis-tools
          - zsh
          - ksshaskpass
          - bat
          - python3-pip
          - docker-compose
          - vim
          - nodejs
          - fonts-firacode
          - yubikey-manager
          - agordejo
          - cifs-utils
          - evolution
          - evolution-ews
          - handbrake
          - handbrake-cli
          - libqt5webkit5
          - openssh-server
          - sysbench
          - nvidia-cuda-dev
          - cmake
          - libncurses5-dev
          - libncursesw5-dev
          - libjack-jackd2-dev
          - librtaudio-dev
          - librtmidi-dev
          - element-desktop
          - audacious
          - nmap
          - migrate
          - wine-staging
          - libpkcs11-helper1
          - network-manager-openvpn
          - network-manager-openvpn-gnome
          - openvpn

    - name: Install snaps
      become: yes
      community.general.snap:
        name:
          - canonical-livepatch
          - gtk-common-themes
          - ngrok
          - postman
          - signal-desktop
          - whatsdesk
          - yakyak
          - zoom-client
          - discord
          - yubioath-desktop

    - name: Install snaps (edge)
      become: yes
      community.general.snap:
        channel: latest/edge
        name:
          - 1password

    - name: Install snaps (classic)
      become: yes
      community.general.snap:
        classic: yes
        name:
          - skype
          - slack

    - name: install python packages
      become: yes
      pip:
        executable: pip3
        name:
          - aws-mfa
          - linode-cli
          - jmespath
          - passlib[bcrypt]

### Docker setup

    - name: Updating user {{ ansible_env.USER }} to docker group and zsh
      become: yes
      user:
        name: "{{ ansible_env.USER }}"
        shell: /usr/bin/zsh
        groups: docker
        append: yes

    - name: start docker
      become: yes
      service:
        name: docker
        state: started
        enabled: yes

### Fix Network Manager
    - name: Tweak Network Manager
      become: yes
      lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        regexp: '^managed='
        line: managed=true

### Configure VyperVPN
    - name: Task name
      stat:
        path: /etc/openvpn/ca.vyprvpn.com.crt
      register: vypervpn_cert

    - name: Download VyperVPN Cert
      get_url:
        url: https://support.vyprvpn.com/hc/article_attachments/360052622052/ca.vyprvpn.com.crt
        dest: /etc/openvpn/ca.vyprvpn.com.crt
      when: not vypervpn_cert.stat.exists

### Install MultiMC

    - name: Check if multimc is installed
      command: dpkg-query -W multimc
      register: multimc_check_deb
      failed_when: multimc_check_deb.rc > 1
      changed_when: multimc_check_deb.rc == 1

    - name: Download multimc
      get_url:
        url: "{{ multimc_url }}/{{ multimc_file }}"
        dest: "/tmp/{{ multimc_file }}"
      when: multimc_check_deb.rc == 1

    - name: Install multimc
      become: yes
      apt: deb="/tmp/{{ multimc_file }}"
      when: multimc_check_deb.rc == 1

    - name: Remove multimc installer file
      ansible.builtin.file:
        path: "/tmp/{{ multimc_file }}"
        state: absent

### Install minikube
#
#    - name: Check if multimc is installed
#      command: dpkg-query -W multimc
#      register: multimc_check_deb
#      failed_when: multimc_check_deb.rc > 1
#      changed_when: multimc_check_deb.rc == 1
#
#    - name: Download multimc
#      get_url:
#        url: "{{ multimc_url }}/{{ multimc_file }}"
#        dest: "/tmp/{{ multimc_file }}"
#      when: multimc_check_deb.rc == 1
#
#    - name: Install multimc
#      become: yes
#      apt: deb="/tmp/{{ multimc_file }}"
#      when: multimc_check_deb.rc == 1
#
#    - name: Remove multimc installer file
#      ansible.builtin.file:
#        path: "/tmp/{{ multimc_file }}"
#        state: absent

### Install LSD

    - name: Check if LSD is installed
      command: dpkg-query -W lsd
      register: lsd_check_deb
      failed_when: lsd_check_deb.rc > 1
      changed_when: lsd_check_deb.rc == 1

    - name: Download LSD github release json
      uri:
        url: https://api.github.com/repos/Peltoche/lsd/releases/latest
        return_content: true
      register: lsd_json_reponse

    - name: Filter github reply for LSD
      set_fact:
        lsd_url: "{{ item }}"
      with_items:
        - "{{ lsd_json_reponse.json | community.general.json_query(json_filter) }}"
      vars:
        - json_filter: assets[?ends_with(name, 'amd64.deb') && !contains(name, 'musl')].browser_download_url

    - name: Get LSD
      get_url:
        url: "{{ lsd_url }}"
        dest: "/tmp/lsd.deb"
      when: lsd_check_deb.rc == 1

    - name: Install LSD
      become: yes
      apt: deb="/tmp/lsd.deb"
      when: lsd_check_deb.rc == 1

    - name: Remove LSD installer file
      ansible.builtin.file:
        path: "/tmp/lsd.deb"
        state: absent

### Install ZSH dependencies

    - name: Install Antibody
      become: yes
      shell: curl -sfL git.io/antibody | sh -s - -b /usr/local/bin

### Install steam

    - name: Check if Steam is installed
      command: dpkg-query -W steam-launcher
      register: steam_check_deb
      failed_when: steam_check_deb.rc > 1
      changed_when: steam_check_deb.rc == 1

    - name: Download Steam
      get_url:
        url: https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb
        dest: "/tmp/steam.deb"
      when: steam_check_deb.rc == 1

    - name: Install Steam
      become: yes
      apt: deb="/tmp/steam.deb"
      when: steam_check_deb.rc == 1

    - name: Remove Steam installer file
      ansible.builtin.file:
        path: "/tmp/steam.deb"
        state: absent

    - name: Mount an NFS volume
      become: yes
      ansible.posix.mount:
        src: //bob.4amlunch.net/NetShare
        path: /home/wonko/NetShare
        opts: rw,username=wonko,password=brian1978,_netdev,uid=1000,gid=1000
        state: mounted
        fstype: cifs

### Install GVM and Go

### Setup nVidia Exporter
#    - name: Install nvidia-exporter binary (assuming already built)
#      become: yes
#      copy:
#        src: "{{ ansible_env.HOME }}/projects/nvidia-exporter/bin/linux/nvidia-exporter"
#        dest: /usr/local/bin/nvidia-exporter
#        owner: root
#        group: root
#        mode: '0755'
#
#    - name: Install nvidia-exporter systemd unit file
#      become: yes
#      template:
#        src: "{{ ansible_env.HOME }}/projects/nvidia-exporter/nvidia-exporter.service"
#        dest: /etc/systemd/system/nvidia-exporter.service
#
#    - name: start nvidia-exporter
#      become: yes
#      systemd:
#        enabled: true
#        state: started
#        name: nvidia-exporter
#        daemon_reload: yes


### Setup JACK Exporter
    - name: Create ~/.config/systemd/user if it does not exist
      file:
        path: "{{ ansible_env.HOME }}/.config/systemd/user"
        state: directory
        mode: '0755'

    - name: Install jack-exporter binary (assuming already built)
      become: yes
      copy:
        src: "{{ ansible_env.HOME }}/projects/jack-exporter/jack-exporter"
        dest: /usr/local/bin/jack-exporter
        owner: root
        group: root
        mode: '0755'

    - name: Install jack-exporter systemd unit file
      template:
        src: "{{ ansible_env.HOME }}/projects/jack-exporter/jack-exporter.service"
        dest: ~/.config/systemd/user/jack-exporter.service

# This needs jack running first so we need to set this up to start elsewhere
#    - name: start jack-exporter
#      systemd:
#        enabled: true
#        state: started
#        name: jack-exporter