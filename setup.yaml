- hosts: all
  vars:
    multimc_url: https://files.multimc.org/downloads/
    multimc_file: multimc_1.6-1.deb
    ko_version: 0.9.3
    keyrings_location: /usr/local/share/keyrings
    keyrings_temp: /tmp/ansible.keyrings
    limits:
      - domain: "*"
        limit_type: soft
        limit_item: nproc
        value: 65535
      - domain: "*"
        limit_type: hard
        limit_item: nproc
        value: 65535
      - domain: "*"
        limit_type: soft
        limit_item: nofile
        value: 524288
      - domain: "*"
        limit_type: hard
        limit_item: nofile
        value: 524288
      - domain: root
        limit_type: soft
        limit_item: nproc
        value: 65535
      - domain: root
        limit_type: hard
        limit_item: nproc
        value: 65535
      - domain: root
        limit_type: soft
        limit_item: nofile
        value: 65535
      - domain: root
        limit_type: hard
        limit_item: nofile
        value: 65535
    repo_items:
      - { keyring: trivy,
          url: https://aquasecurity.github.io/trivy-repo/deb/public.key,
          repo: "deb [signed-by={{ keyrings_location }}/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb focal main" }
      - { keyring: bazel,
          url: https://bazel.build/bazel-release.pub.gpg,
          repo: "deb [arch=amd64 signed-by={{ keyrings_location }}/bazel.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" }
      - { keyring: docker,
          url: https://download.docker.com/linux/ubuntu/gpg,
          repo: "deb [arch=amd64 signed-by={{ keyrings_location }}/docker.gpg] https://download.docker.com/linux/ubuntu bionic stable" }
      - { keyring: helm,
          url: https://baltocdn.com/helm/signing.asc,
          repo: "deb [signed-by={{ keyrings_location }}/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" }
      - { keyring: google,
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg,
          repo: "deb [signed-by={{ keyrings_location }}/google.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" }
      - { keyring: riot,
          url: https://packages.riot.im/debian/riot-im-archive-keyring.gpg,
          repo: "deb [arch=amd64 signed-by={{ keyrings_location }}/riot.gpg] https://packages.riot.im/debian/ default main" }
      - { keyring: golang-migrate,
          url: https://packagecloud.io/golang-migrate/migrate/gpgkey,
          repo: "deb [signed-by={{ keyrings_location }}/golang-migrate.gpg] https://packagecloud.io/golang-migrate/migrate/ubuntu/ focal main" }
      - { keyring: wine,
          url: https://dl.winehq.org/wine-builds/winehq.key,
          repo: "deb [signed-by={{ keyrings_location }}/wine.gpg] https://dl.winehq.org/wine-builds/ubuntu/ {{ ansible_distribution_release }} main" }
      - { keyring: jotta,
          url: https://repo.jotta.us/public.gpg,
          repo: "deb [signed-by={{ keyrings_location }}/jotta.gpg] https://repo.jotta.us/debian debian main" }
      - { keyring: hashicorp,
          url: https://apt.releases.hashicorp.com/gpg,
          repo: "deb [arch=amd64 signed-by={{ keyrings_location }}/hashicorp.gpg] https://apt.releases.hashicorp.com impish main" }
      - { keyring: io.packagecloud.rabbitmq,
          url: https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey,
          repo: "deb [signed-by={{ keyrings_location }}/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ focal main" }
      - { keyring: net.launchpad.ppa.rabbitmq.erlang,
          url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xf77f1eda57ebb1cc",
        repo: "deb [signed-by={{ keyrings_location }}/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main" }
      - { keyring: 1password,
          url: https://downloads.1password.com/linux/keys/1password.asc,
          repo: "deb [arch=amd64 signed-by={{ keyrings_location }}/1password.gpg] https://downloads.1password.com/linux/debian/amd64 stable main" }
      - { repo: "deb [arch=amd64 signed-by={{ keyrings_location }}/k6.gpg] https://dl.k6.io/deb stable main" }
      - { repo: ppa:lutris-team/lutris }
      - { repo: ppa:git-core/ppa }
# Missing jammy still
#      - { repo: ppa:yubico/stable }
#      - { repo: ppa:kisak/kisak-mesa }
      - { repo: ppa:graphics-drivers/ppa }
      - { repo: ppa:gns3/ppa }
      - { repo: ppa:apandada1/xournalpp-stable }
    apt_keys:
      -  { keyring: k6, keyserver: keyserver.ubuntu.com, keyID: C5AD17C747E3415A3642D57D77C6C491D6AC1D69 }
      -  { keyring: com.rabbitmq.team, keyserver: keys.openpgp.org, keyID: 0A9AF2115F4687BD29803A206B73A36E6026DFCA }

  roles:
    - role: patrick-hill.franz
      vars:
        franz_version: 5.7.0
    - role: ansible-role-keybase
      become: yes
    - role: oefenweb.dropbox
      become: yes
# This has stopped working.
#    - role: stefangweichinger.ansible_rclone
#      become: yes
#    - role: geerlingguy.postgresql
#      become: yes
#      vars:
#        postgresql_global_config_options:
#          - option: listen_addresses
#            value: "*"
#        postgresql_hba_entries:
#          - { type: local, database: all, user: postgres, auth_method: peer }
#          - { type: local, database: all, user: all, auth_method: peer }
#          - { type: host, database: all, user: all, address: '0.0.0.0/0', auth_method: md5 }
#          - { type: host, database: all, user: all, address: '::0/0', auth_method: md5 }
#        postgresql_users:
#          - name: wonko
#            password: "{{ psql_wonko_password }}"
#            role_attr_flags: SUPERUSER
#          - name: chremoas_dev
#            password: "{{ psql_chremoas_dev_password }}"
#        postgresql_databases:
#          - name: wonko
#            owner: wonko
#          - name: chremoas_dev
#            owner: chremoas_dev
    - role: ansible-consul
      become: yes
      vars:
        consul_version: 1.11.2
        consul_datacenter: linode
        consul_client_address: 0.0.0.0
        consul_install_upgrade: true
        consul_node_role: bootstrap

  tasks:
### Set inotify watches for JetBrains
    - name: Set inotify watches
      become: yes
      copy:
        dest: "/etc/sysctl.d/90-inotify.conf"
        content: |
          fs.inotify.max_user_watches = 524288
          fs.inotify.max_user_instances = 256
      register: inotify

### Set ptrace scope
    - name: Set ptrace scope
      become: yes
      lineinfile:
        path: "/etc/sysctl.d/10-ptrace.conf"
        regexp: "^kernel.yama.ptrace_scope"
        line: "kernel.yama.ptrace_scope = 0"
      register: ptrace

### Disable netfilter for bridges
    - name: Disable netfilter for bridges
      become: yes
      copy:
        dest: "/etc/sysctl.d/99-netfilter-bridge.conf"
        content: |
          net.bridge.bridge-nf-call-ip6tables = 0
          net.bridge.bridge-nf-call-iptables = 0
          net.bridge.bridge-nf-call-arptables = 0
      register: netfilter

    - name: Load br_netfilter kernel module
      become: yes
      copy:
        dest: "/etc/modules-load.d/br_netfilter.conf"
        content: |
          br_netfilter
      register: netfilter_kmod

    - name: load br_netfilter
      become: yes
      command: modprobe br_netfilter
      when: netfilter_kmod.changed

### Set open files stuff for app requirements
    - name: Set file max
      become: yes
      copy:
        dest: "/etc/sysctl.d/90-file-max.conf"
        content: |
          fs.file-max = 524288
      register: filemax

### Run sysctl if needed
    - name: run sysctl
      become: yes
      command: sysctl -p
      when: inotify.changed or filemax.changed or ptrace.changed or netfilter.changed

    - name: Add or modify nproc soft limit for the user root. Keep or set the maximal value.
      become: yes
      community.general.pam_limits:
        domain: "{{ item.domain }}"
        limit_type: "{{ item.limit_type }}"
        limit_item: "{{ item.limit_item }}"
        value: "{{ item.value }}"
        use_max: yes
      loop: "{{ limits }}"

    - name: Set DefaultLimitNOFILE in systemd system.conf
      become: yes
      lineinfile:
        path: /etc/systemd/system.conf
        regexp: '^DefaultLimitNOFILE='
        line: DefaultLimitNOFILE=524288

    - name: Set DefaultLimitNOFILE in systemd user.conf
      become: yes
      lineinfile:
        path: /etc/systemd/user.conf
        regexp: '^DefaultLimitNOFILE='
        line: DefaultLimitNOFILE=524288

### Set firewire to highest priority RT process
    - name: Set RTIRQ_NAME_LIST to set firewire highest priority
      become: yes
      lineinfile:
        path: /etc/default/rtirq
        regexp: '^RTIRQ_NAME_LIST='
        line: RTIRQ_NAME_LIST="firewire snd usb i8042"

## Set Governor to performance
    - name: Set Governor to performance
      become: yes
      copy:
        dest: "/etc/default/cpufrequtils"
        content: |
          GOVERNOR="performance"

### Make sure keyrings location exists:
    - name: Ensure keyrings location exists
      become: yes
      file:
        path: "{{ keyrings_location }}"
        state: directory
        mode: '0755'


### gpg is dumb and won't create this directory automatically
    - name: create GPG dir for root
      become: yes
      file:
        path: /root/.gnupg
        state: directory
        mode: '0700'

### Add APT keys and repos
    - name: add i386 architecture
      command: dpkg --add-architecture i386
      become: yes

    # Make sure keyrings temp location exists:
    - name: Ensure temp keyrings location exists
      become: yes
      file:
        path: "{{ keyrings_temp }}"
        state: directory
        mode: '0755'

    - name: Download keys
      become: yes
      get_url:
        url: "{{ item.url }}"
        dest: "{{ keyrings_temp }}/{{ item.keyring }}.key"
      loop: "{{ repo_items }}"
      when: item.url is defined and item.keyring is defined

    - name: Add apt keys using gpg keyrings_location from keyserver
      become: yes
      command: "gpg --no-default-keyring --keyring {{ keyrings_location }}/{{ item.keyring }}.gpg --import {{ keyrings_temp }}/{{ item.keyring }}.key"
      loop: "{{ repo_items }}"
      when: item.url is defined and item.keyring is defined

    # Remove temp keyrings location
    - name: Remove temp keyrings location
      become: yes
      file:
        path: "{{ keyrings_temp }}"
        state: absent

    - name: Add apt keys directly from the keyserver
      become: yes
      command: "gpg --no-default-keyring --keyring {{ keyrings_location }}/{{ item.keyring }}.gpg --keyserver {{ item.keyserver }} --recv-keys {{ item.keyID }}"
      loop: "{{ apt_keys }}"

    - name: Add apt repositories into sources list
      become: yes
      apt_repository:
        repo: "{{ item.repo }}"
        state: present
      loop: "{{ repo_items }}"
      when: item.repo is defined

# NodeSource doesn't currently support jammy
#    - name: Add NodeSource stuff
##      warn: false # why doesn't this work?
#      become: yes
#      shell: curl -sL https://deb.nodesource.com/setup_14.x | bash -

    - name: Install CircleCI CLI
      become: yes
      shell: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | bash

### Install software
    - name: Install a list of packages
      become: yes
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - gnupg-agent
          - software-properties-common
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - git
          - git-lfs
          - git-extras
          - ark
          - bazel
          - bison
          - cli-common
          - cloc
          - curl
          - default-jre
          - flex
          - geoip-database
          - hunspell
          - jq
          - lutris
          - nfs-common
          - postgresql-client
          - postgresql-client-common
          - rpcbind
          - s-tui
          - sane
          - screen
          - stress
          - traceroute
          - virt-manager
          - virt-viewer
          - xournal
          - xdg-desktop-portal
          - xdg-desktop-portal-gtk
          - kubectl
          - helm
          - redis-tools
          - zsh
          - ksshaskpass
          - bat
          - python3-pip
          - docker-compose
          - vim
          - nodejs
          - fonts-firacode
          - yubikey-manager
          - agordejo
          - cifs-utils
          - evolution
          - evolution-ews
          - handbrake
          - handbrake-cli
          - libqt5webkit5
          - openssh-server
          - sysbench
          - nvidia-cuda-dev
          - cmake
          - libncurses5-dev
          - libncursesw5-dev
          - libjack-jackd2-dev
          - librtaudio-dev
          - librtmidi-dev
          - element-desktop
          - audacious
          - nmap
          - migrate
          - winehq-staging
          - winetricks
          - nvtop
          - libpkcs11-helper1
          - network-manager-openvpn
          - network-manager-openvpn-gnome
          - openvpn
          - nginx
          - colordiff
          - python-is-python3
          - adb
          - ethtool
          - stressapptest
          - cpufrequtils
          - python3-venv
          - pipx
          - crda
          - lm-sensors
          - fancontrol
          - pdftk
          - xorriso
          - ocl-icd-opencl-dev
          - fakeroot
          - inxi
          - jotta-cli
          - vulkan-tools
          - nomad
          - automake
          - autotools-dev
          - libiberty-dev
          - libpci-dev
          - libssl-dev
          - libudev-dev
          - debhelper
          - erlang-base
          - erlang-asn1
          - erlang-crypto
          - erlang-eldap
          - erlang-ftp
          - erlang-inets
          - erlang-mnesia
          - erlang-os-mon
          - erlang-parsetools
          - erlang-public-key
          - erlang-runtime-tools
          - erlang-snmp
          - erlang-ssl
          - erlang-syntax-tools
          - erlang-tftp
          - erlang-tools
          - erlang-xmerl
          - rabbitmq-server
          - trivy
          - gns3-gui
          - gns3-server
          - gns3-iou
          - samba
          - vde2
          - psensor
          - build-essential
          - qtcreator
          - qtbase5-dev
          - qtchooser
          - qt5-qmake
          - qtbase5-dev-tools
          - libusb-1.0-0-dev
          - libhidapi-dev
          - pkgconf
          - libmbedtls-dev
          - xdotool
          - xournalpp
          - texlive-latex-extra
          - samba
          - smbclient
          - winbind
          - libpam-winbind
          - libnss-winbind
          - krb5-kdc
          - libpam-krb5
          - clang
          - htop
          - k6
          - 1password
          - python3-pip
          - k4dirstat
#          - oracle-java17-installer

    - name: Install snaps
      become: yes
      community.general.snap:
        name:
          - canonical-livepatch
          - gtk-common-themes
          - ngrok
          - postman
          - signal-desktop
          - whatsdesk
          - yakyak
          - zoom-client
          - discord
          - yubioath-desktop
          - irccloud
          - yq
          - doctl

    - name: Install snaps (classic)
      become: yes
      community.general.snap:
        classic: yes
        name:
          - skype
          - slack
          - flutter

    - name: install python packages
      become: yes
      pip:
        executable: pip3
        name:
          - aws-mfa
          - linode-cli
          - jmespath
          - passlib[bcrypt]
          - protonup-ng
          - qmk
          - bpytop

### Docker setup
    - name: Updating user {{ ansible_env.USER }} to docker group and zsh
      become: yes
      user:
        name: "{{ ansible_env.USER }}"
        shell: /usr/bin/zsh
        groups: docker
        append: yes

    - name: start docker
      become: yes
      service:
        name: docker
        state: started
        enabled: yes

### Snap Package configuration
    - name: Snap Packages - Setup Plugs
      become: yes
      become_method: sudo
      changed_when: false
      shell: 'snap connect {{ item.app }}:{{ item.plug }}'
      with_items:
        - plug: kube-config
          app: doctl
        - plug: dot-docker
          app: doctl
        - plug: "ssh-keys :ssh-keys"
          app: doctl

### Fix Network Manager
    - name: Tweak Network Manager
      become: yes
      lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        regexp: '^managed='
        line: managed=true

### Setup secondary network interface for KVM
    - name: copy netplan config
      become: yes
      copy:
        src: files/01-network-manager-all.yaml
        dest: /etc/netplan/01-network-manager-all.yaml
      register: netplan

    - name: apply netplan config
      become: true
      command: netplan apply
      when: netplan.changed

### Configure VyprVPN
    - name: Check if VyperVPN cert has been downloaded
      stat:
        path: /etc/openvpn/ca.vyprvpn.com.crt
      register: vyprvpn_cert

    - name: Download VyprVPN Cert
      become: yes
      get_url:
        url: https://support.vyprvpn.com/hc/article_attachments/360052622052/ca.vyprvpn.com.crt
        dest: /etc/openvpn/ca.vyprvpn.com.crt
      when: not vyprvpn_cert.stat.exists

### Install MultiMC
    - name: Check if multimc is installed
      command: dpkg-query -W multimc
      register: multimc_check_deb
      failed_when: multimc_check_deb.rc > 1
      changed_when: multimc_check_deb.rc == 1

    - name: Download multimc
      get_url:
        url: "{{ multimc_url }}/{{ multimc_file }}"
        dest: "/tmp/{{ multimc_file }}"
      when: multimc_check_deb.rc | default('') == 1

    - name: Install multimc
      become: yes
      apt: deb="/tmp/{{ multimc_file }}"
      when: multimc_check_deb.rc | default('') == 1

    - name: Remove multimc installer file
      ansible.builtin.file:
        path: "/tmp/{{ multimc_file }}"
        state: absent

### Install KO
    - name: Get KO
      become: yes
      unarchive:
        src: "https://github.com/google/ko/releases/download/v{{ko_version}}/ko_{{ko_version}}_Linux_x86_64.tar.gz"
        dest: /usr/local/bin
        remote_src: yes
        mode: 0755

### Install LSD
    - name: Check if LSD is installed
      command: dpkg-query -W lsd
      register: lsd_check_deb
      failed_when: lsd_check_deb.rc > 1
      changed_when: lsd_check_deb.rc == 1

    - name: Download LSD github release json
      uri:
        url: https://api.github.com/repos/Peltoche/lsd/releases/latest
        return_content: true
      register: lsd_reponse
      when: lsd_check_deb.rc | default('') == 1

    - name: Filter github reply for LSD
      set_fact:
        lsd_url: "{{ lsd_reponse.json | community.general.json_query(json_filter) }}"
      vars:
        - json_filter: assets[?ends_with(name, 'amd64.deb') && !contains(name, 'musl')].browser_download_url
      when: lsd_check_deb.rc | default('') == 1

    - name: Get LSD
      get_url:
        url: "{{ lsd_url }}"
        dest: "/tmp/lsd.deb"
      when: lsd_check_deb.rc | default('') == 1

    - name: Install LSD
      become: yes
      apt: deb="/tmp/lsd.deb"
      when: lsd_check_deb.rc | default('') == 1

    - name: Remove LSD installer file
      ansible.builtin.file:
        path: "/tmp/lsd.deb"
        state: absent

### Install ZSH dependencies
    - name: Install Antibody
      become: yes
      shell: curl -sfL git.io/antibody | sh -s - -b /usr/local/bin

### Install steam
    - name: Check if Steam is installed
      command: dpkg-query -W steam-launcher
      register: steam_check_deb
      failed_when: steam_check_deb.rc > 1
      changed_when: steam_check_deb.rc == 1

    - name: Download Steam
      get_url:
        url: https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb
        dest: "/tmp/steam.deb"
      when: steam_check_deb.rc | default('') == 1

    - name: Install Steam
      become: yes
      apt: deb="/tmp/steam.deb"
      when: steam_check_deb.rc | default('') == 1

    - name: Remove Steam installer file
      ansible.builtin.file:
        path: "/tmp/steam.deb"
        state: absent

### Mount netshare
    - name: Mount an NFS volume
      become: yes
      ansible.posix.mount:
        src: //bob.4amlunch.net/NetShare
        path: "/home/{{ domain_user }}/NetShare"
        opts: "rw,username={{ domain_user }},password={{ domain_password }},_netdev,uid=1000,gid=1000"
        state: mounted
        fstype: cifs

### Setup nVidia Exporter
#    - name: Install nvidia-exporter binary (assuming already built)
#      become: yes
#      copy:
#        src: "{{ ansible_env.HOME }}/projects/nvidia-exporter/bin/linux/nvidia-exporter"
#        dest: /usr/local/bin/nvidia-exporter
#        owner: root
#        group: root
#        mode: '0755'
#
#    - name: Install nvidia-exporter systemd unit file
#      become: yes
#      template:
#        src: "{{ ansible_env.HOME }}/projects/nvidia-exporter/nvidia-exporter.service"
#        dest: /etc/systemd/system/nvidia-exporter.service
#
#    - name: start nvidia-exporter
#      become: yes
#      systemd:
#        enabled: true
#        state: started
#        name: nvidia-exporter
#        daemon_reload: yes


## Setup JACK Exporter
#    - name: Create ~/.config/systemd/user if it does not exist
#      file:
#        path: "{{ ansible_env.HOME }}/.config/systemd/user"
#        state: directory
#        mode: '0755'
#
#    - name: Install jack-exporter binary (assuming already built)
#      become: yes
#      copy:
#        src: "{{ ansible_env.HOME }}/projects/jack-exporter/jack-exporter"
#        dest: /usr/local/bin/jack-exporter
#        owner: root
#        group: root
#        mode: '0755'
#
#    - name: Install jack-exporter systemd unit file
#      template:
#        src: "{{ ansible_env.HOME }}/projects/jack-exporter/jack-exporter.service"
#        dest: ~/.config/systemd/user/jack-exporter.service

# This needs jack running first so we need to set this up to start elsewhere
#    - name: start jack-exporter
#      systemd:
#        enabled: true
#        state: started
#        name: jack-exporter

### Setup nginx
    - name: Create nginx ssl directory
      become: yes
      file:
        path: /etc/ssl/self
        state: directory
        mode: '0755'

    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      become: yes
      community.crypto.openssl_privatekey:
        path: /etc/ssl/self/chremoas-dev.4amlunch.net.key

    - name: Generate an OpenSSL Certificate Signing Request
      become: yes
      community.crypto.openssl_csr:
        path: /etc/ssl/self/chremoas-dev.4amlunch.net.csr
        privatekey_path: /etc/ssl/self/chremoas-dev.4amlunch.net.key
        common_name: chremoas-dev.4amlunch.net

    - name: Generate a Self Signed OpenSSL certificate
      become: yes
      community.crypto.x509_certificate:
        path: /etc/ssl/self/chremoas-dev.4amlunch.net.crt
        privatekey_path: /etc/ssl/self/chremoas-dev.4amlunch.net.key
        csr_path: /etc/ssl/self/chremoas-dev.4amlunch.net.csr
        provider: selfsigned

    - name: start nginx
      become: yes
      service:
        name: nginx
        state: started

    - name: copy the nginx config file and restart nginx
      become: yes
      copy:
        src: /home/wonko/projects/deepthought/nginx/chremoas-dev.cfg
        dest: /etc/nginx/sites-available/chremoas-dev.cfg

    - name: create symlink
      become: yes
      file:
        src: /etc/nginx/sites-available/chremoas-dev.cfg
        dest: /etc/nginx/sites-enabled/chremoas-dev
        state: link

    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become: yes

### Setup RabbitMQ
    - name: Enables the rabbitmq_managemenut plugin
      become: yes
      rabbitmq_plugin:
        names: rabbitmq_management
        state: enabled

    - name: "RabbitMQ: Delete guest user"
      become: yes
      rabbitmq_user:
        user: guest
        state: absent

    - name: "RabbitMQ create chremoas_dev vhost"
      become: yes
      rabbitmq_vhost:
        name: net.4amlunch.dev
        state: present

    - name: "RabbitMQ create hecnet vhost"
      become: yes
      rabbitmq_vhost:
        name: hecnet
        state: present

    - name: "RabbitMQ: Add user wonko (admin)"
      become: yes
      rabbitmq_user:
        user: wonko
        password: "{{ rabbitmq_wonko_password }}"
        permissions:
          - vhost: /
            configure_priv: .*
            read_priv: .*
            write_priv: .*
          - vhost: net.4amlunch.dev
            configure_priv: .*
            read_priv: .*
            write_priv: .*
          - vhost: hecnet
            configure_priv: .*
            read_priv: .*
            write_priv: .*
        state: present
        tags: "administrator"

#### Setup chremoas_dev stuff
    - name: "RabbitMQ: Add user chremoas_dev"
      become: yes
      rabbitmq_user:
        user: chremoas_dev
        password: "{{ rabbitmq_chremoas_dev_password }}"
        permissions:
          - vhost: net.4amlunch.dev
            configure_priv: .*
            read_priv: .*
            write_priv: .*
        state: present

#### Setup tunnel_manager dev stuff
    - name: "RabbitMQ: Add user hecnet"
      become: yes
      rabbitmq_user:
        user: hecnet
        password: "{{ tunnel_manager_password }}"
        permissions:
          - vhost: hecnet
            configure_priv: .*
            read_priv: .*
            write_priv: .*
        state: present