- hosts: localhost
  vars:
    multimc_url: https://files.multimc.org/downloads/
    multimc_file: multimc_1.4-1.deb
    limits:
      - domain: "*"
        limit_type: soft
        limit_item: nproc
        value: 65535
      - domain: "*"
        limit_type: hard
        limit_item: nproc
        value: 65535
      - domain: "*"
        limit_type: soft
        limit_item: nofile
        value: 524288
      - domain: "*"
        limit_type: hard
        limit_item: nofile
        value: 524288
      - domain: root
        limit_type: soft
        limit_item: nproc
        value: 65535
      - domain: root
        limit_type: hard
        limit_item: nproc
        value: 65535
      - domain: root
        limit_type: soft
        limit_item: nofile
        value: 65535
      - domain: root
        limit_type: hard
        limit_item: nofile
        value: 65535

  roles:
    - role: patrick-hill.franz
      vars:
        franz_version: 5.6.1
    - role: ansible-role-keybase
      become: yes
#    - role: fubarhouse.golang
#      become: yes

  tasks:
### Set inotify watches for JetBrains

    - name: Set inotify watches
      become: yes
      copy:
        dest: "/etc/sysctl.d/90-inotify.conf"
        content: |
          fs.inotify.max_user_watches = 524288
      register: inotify

### Set open files stuff for app requirements

    - name: Set file max
      become: yes
      copy:
        dest: "/etc/sysctl.d/90-file-max.conf"
        content: |
          fs.file-max = 524288
      register: filemax

    - name: run sysctl
      become: yes
      command: sysctl -p
      when: inotify.changed or filemax.changed

    - name: Add or modify nproc soft limit for the user root. Keep or set the maximal value.
      become: yes
      community.general.pam_limits:
        domain: "{{ item.domain }}"
        limit_type: "{{ item.limit_type }}"
        limit_item: "{{ item.limit_item }}"
        value: "{{ item.value }}"
        use_max: yes
      loop: "{{ limits }}"

    - name: Set DefaultLimitNOFILE in systemd system.conf
      become: yes
      lineinfile:
        path: /etc/systemd/system.conf
        regexp: '^DefaultLimitNOFILE='
        line: DefaultLimitNOFILE=524288

    - name: Set DefaultLimitNOFILE in systemd user.conf
      become: yes
      lineinfile:
        path: /etc/systemd/user.conf
        regexp: '^DefaultLimitNOFILE='
        line: DefaultLimitNOFILE=524288

### Add APT keys and repos

    - name: Add bazel Apt signing key
      become: yes
      apt_key:
        url: https://bazel.build/bazel-release.pub.gpg
        state: present

    - name: Add bazel repository into sources list
      become: yes
      apt_repository:
        repo: deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8
        state: present
        filename: bazel

    - name: add Docker GPG key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add docker repository to apt
      become: yes
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: add helm GPG key
      become: yes
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present

    - name: add helm repository to apt
      become: yes
      apt_repository:
        repo: deb https://baltocdn.com/helm/stable/debian/ all main
        state: present

    - name: add kubectl GPG key
      become: yes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: add kubectl repository to apt
      become: yes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Add lutris ppa
      become: yes
      apt_repository:
        repo: ppa:lutris-team/lutris

    - name: Add git ppa
      become: yes
      apt_repository:
        repo: ppa:git-core/ppa

### Install software

    - name: Install a list of packages
      become: yes
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - gnupg-agent
          - software-properties-common
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - quassel-client
          - git
          - ark
          - bazel=3.7.2
          - bison
          - cli-common
          - cloc
          - curl
          - default-jre
          - flex
          - geoip-database
          - hunspell
          - jq
          - lutris
          - nfs-common
          - postgresql-client-12
          - postgresql-client-common
          - rpcbind
          - s-tui
          - sane
          - screen
          - stress
          - traceroute
          - virt-manager
          - virt-viewer
          - xournal
          - xdg-desktop-portal
          - xdg-desktop-portal-gtk
          - kubectl
          - helm
          - redis-tools
          - zsh
          - ksshaskpass

    - name: Install snaps
      become: yes
      community.general.snap:
        name:
          - canonical-livepatch
          - gtk-common-themes
          - ngrok
          - postman
          - signal-desktop
          - whatsdesk
          - yakyak
          - zoom-client
          - discord

    - name: Install snaps (edge)
      become: yes
      community.general.snap:
        channel: latest/edge
        name:
          - 1password

    - name: Install snaps (classic)
      become: yes
      community.general.snap:
        classic: yes
        name:
          - go
          - skype
          - slack

### Docker setup

    - name: Updating user {{ ansible_env.USER }} to docker group and zsh
      become: yes
      user:
        name: "{{ ansible_env.USER }}"
        shell: /usr/bin/zsh
        groups: docker
        append: yes

    - name: start docker
      become: yes
      service:
        name: docker
        state: started
        enabled: yes

### Install MultiMC

    - name: Check if multimc is installed
      command: dpkg-query -W multimc
      register: multimc_check_deb
      failed_when: multimc_check_deb.rc > 1
      changed_when: multimc_check_deb.rc == 1

    - name: Download multimc
      get_url:
        url: "{{ multimc_url }}/{{ multimc_file }}"
        dest: "/home/{{ ansible_env.USER }}/Downloads/{{ multimc_file }}"
      when: multimc_check_deb.rc == 1

    - name: Install multimc
      become: yes
      apt: deb="/home/{{ ansible_env.USER }}/Downloads/{{ multimc_file }}"
      when: multimc_check_deb.rc == 1

### Install LSD

    - name: Check if LSD is installed
      command: dpkg-query -W lsd
      register: lsd_check_deb
      failed_when: lsd_check_deb.rc > 1
      changed_when: lsd_check_deb.rc == 1

    - name: Download LSD github release json
      uri:
        url: https://api.github.com/repos/Peltoche/lsd/releases/latest
        return_content: true
      register: lsd_json_reponse

    - name: Filter github reply for LSD
      set_fact:
        lsd_url: "{{ item }}"
      with_items:
        - "{{ lsd_json_reponse.json | community.general.json_query(json_filter) }}"
      vars:
        - json_filter: assets[?ends_with(name, 'amd64.deb') && !contains(name, 'musl')].browser_download_url

    - name: Get LSD
      get_url:
        url: "{{ lsd_url }}"
        dest: "/home/{{ ansible_env.USER }}/Downloads/lsd.deb"
      when: lsd_check_deb.rc == 1

    - name: Install LSD
      become: yes
      apt: deb="/home/{{ ansible_env.USER }}/Downloads/lsd.deb"
      when: lsd_check_deb.rc == 1

### Install ZFS dependencies

    - name: Install Antibody
      become: yes
      shell: curl -sfL git.io/antibody | sh -s - -b /usr/local/bin

### Install steam

    - name: Check if LSD is installed
      command: dpkg-query -W steam-launcher
      register: steam_check_deb
      failed_when: steam_check_deb.rc > 1
      changed_when: steam_check_deb.rc == 1

    - name: Download Steam
      get_url:
        url: https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb
        dest: "/home/{{ ansible_env.USER }}/Downloads/steam.deb"
      when: steam_check_deb.rc == 1

    - name: Install multimc
      become: yes
      apt: deb="/home/{{ ansible_env.USER }}/Downloads/steam.deb"
      when: steam_check_deb.rc == 1
